// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DatabaseConnectionArgs } from "./databaseConnection";
export type DatabaseConnection = import("./databaseConnection").DatabaseConnection;
export const DatabaseConnection: typeof import("./databaseConnection").DatabaseConnection = null as any;
utilities.lazyLoad(exports, ["DatabaseConnection"], () => require("./databaseConnection"));

export { DatabaseConnectionSecretArgs } from "./databaseConnectionSecret";
export type DatabaseConnectionSecret = import("./databaseConnectionSecret").DatabaseConnectionSecret;
export const DatabaseConnectionSecret: typeof import("./databaseConnectionSecret").DatabaseConnectionSecret = null as any;
utilities.lazyLoad(exports, ["DatabaseConnectionSecret"], () => require("./databaseConnectionSecret"));

export { ProjectArgs } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectMemberArgs } from "./projectMember";
export type ProjectMember = import("./projectMember").ProjectMember;
export const ProjectMember: typeof import("./projectMember").ProjectMember = null as any;
utilities.lazyLoad(exports, ["ProjectMember"], () => require("./projectMember"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { TeamArgs } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));


// Export sub-modules:
import * as config from "./config";

export {
    config,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cloudbeaver:index:DatabaseConnection":
                return new DatabaseConnection(name, <any>undefined, { urn })
            case "cloudbeaver:index:DatabaseConnectionSecret":
                return new DatabaseConnectionSecret(name, <any>undefined, { urn })
            case "cloudbeaver:index:Project":
                return new Project(name, <any>undefined, { urn })
            case "cloudbeaver:index:ProjectMember":
                return new ProjectMember(name, <any>undefined, { urn })
            case "cloudbeaver:index:Team":
                return new Team(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cloudbeaver", "index", _module)
pulumi.runtime.registerResourcePackage("cloudbeaver", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cloudbeaver") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
