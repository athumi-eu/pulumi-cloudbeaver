# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'EnableUserResult',
    'AwaitableEnableUserResult',
    'enable_user',
    'enable_user_output',
]

@pulumi.output_type
class EnableUserResult:
    def __init__(__self__, enabled=None, user_name=None):
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        pulumi.set(__self__, "enabled", enabled)
        if user_name and not isinstance(user_name, str):
            raise TypeError("Expected argument 'user_name' to be a str")
        pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def enabled(self) -> builtins.bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def user_name(self) -> builtins.str:
        return pulumi.get(self, "user_name")


class AwaitableEnableUserResult(EnableUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return EnableUserResult(
            enabled=self.enabled,
            user_name=self.user_name)


def enable_user(enabled: Optional[builtins.bool] = None,
                user_name: Optional[builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableEnableUserResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['enabled'] = enabled
    __args__['user_name'] = user_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudbeaver:index:enableUser', __args__, opts=opts, typ=EnableUserResult).value

    return AwaitableEnableUserResult(
        enabled=pulumi.get(__ret__, 'enabled'),
        user_name=pulumi.get(__ret__, 'user_name'))
def enable_user_output(enabled: Optional[pulumi.Input[builtins.bool]] = None,
                       user_name: Optional[pulumi.Input[builtins.str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[EnableUserResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['enabled'] = enabled
    __args__['user_name'] = user_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudbeaver:index:enableUser', __args__, opts=opts, typ=EnableUserResult)
    return __ret__.apply(lambda __response__: EnableUserResult(
        enabled=pulumi.get(__response__, 'enabled'),
        user_name=pulumi.get(__response__, 'user_name')))
