# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['DatabaseConnectionSecretArgs', 'DatabaseConnectionSecret']

@pulumi.input_type
class DatabaseConnectionSecretArgs:
    def __init__(__self__, *,
                 database_connection_id: pulumi.Input[str],
                 entra_group_name: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 team_id: pulumi.Input[str]):
        """
        The set of arguments for constructing a DatabaseConnectionSecret resource.
        """
        pulumi.set(__self__, "database_connection_id", database_connection_id)
        pulumi.set(__self__, "entra_group_name", entra_group_name)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "team_id", team_id)

    @property
    @pulumi.getter
    def database_connection_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database_connection_id")

    @database_connection_id.setter
    def database_connection_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_connection_id", value)

    @property
    @pulumi.getter
    def entra_group_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "entra_group_name")

    @entra_group_name.setter
    def entra_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "entra_group_name", value)

    @property
    @pulumi.getter
    def project_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def team_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "team_id", value)


class DatabaseConnectionSecret(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database_connection_id: Optional[pulumi.Input[str]] = None,
                 entra_group_name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a DatabaseConnectionSecret resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DatabaseConnectionSecretArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a DatabaseConnectionSecret resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DatabaseConnectionSecretArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatabaseConnectionSecretArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 database_connection_id: Optional[pulumi.Input[str]] = None,
                 entra_group_name: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 team_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatabaseConnectionSecretArgs.__new__(DatabaseConnectionSecretArgs)

            if database_connection_id is None and not opts.urn:
                raise TypeError("Missing required property 'database_connection_id'")
            __props__.__dict__["database_connection_id"] = database_connection_id
            if entra_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'entra_group_name'")
            __props__.__dict__["entra_group_name"] = entra_group_name
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            if team_id is None and not opts.urn:
                raise TypeError("Missing required property 'team_id'")
            __props__.__dict__["team_id"] = team_id
        super(DatabaseConnectionSecret, __self__).__init__(
            'cloudbeaver:index:DatabaseConnectionSecret',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DatabaseConnectionSecret':
        """
        Get an existing DatabaseConnectionSecret resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DatabaseConnectionSecretArgs.__new__(DatabaseConnectionSecretArgs)

        __props__.__dict__["database_connection_id"] = None
        __props__.__dict__["entra_group_name"] = None
        __props__.__dict__["project_id"] = None
        __props__.__dict__["team_id"] = None
        return DatabaseConnectionSecret(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def database_connection_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "database_connection_id")

    @property
    @pulumi.getter
    def entra_group_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "entra_group_name")

    @property
    @pulumi.getter
    def project_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def team_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "team_id")

