// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package Cloudbeaver

import (
	"context"
	"reflect"

	"github.com/pulumi/Cloudbeaver/sdk/go/Cloudbeaver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func EnableUser(ctx *pulumi.Context, args *EnableUserArgs, opts ...pulumi.InvokeOption) (*EnableUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv EnableUserResult
	err := ctx.Invoke("cloudbeaver:index:enableUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type EnableUserArgs struct {
	Enabled   bool   `pulumi:"enabled"`
	User_name string `pulumi:"user_name"`
}

type EnableUserResult struct {
	Enabled   bool   `pulumi:"enabled"`
	User_name string `pulumi:"user_name"`
}

func EnableUserOutput(ctx *pulumi.Context, args EnableUserOutputArgs, opts ...pulumi.InvokeOption) EnableUserResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (EnableUserResultOutput, error) {
			args := v.(EnableUserArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("cloudbeaver:index:enableUser", args, EnableUserResultOutput{}, options).(EnableUserResultOutput), nil
		}).(EnableUserResultOutput)
}

type EnableUserOutputArgs struct {
	Enabled   pulumi.BoolInput   `pulumi:"enabled"`
	User_name pulumi.StringInput `pulumi:"user_name"`
}

func (EnableUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EnableUserArgs)(nil)).Elem()
}

type EnableUserResultOutput struct{ *pulumi.OutputState }

func (EnableUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnableUserResult)(nil)).Elem()
}

func (o EnableUserResultOutput) ToEnableUserResultOutput() EnableUserResultOutput {
	return o
}

func (o EnableUserResultOutput) ToEnableUserResultOutputWithContext(ctx context.Context) EnableUserResultOutput {
	return o
}

func (o EnableUserResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v EnableUserResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o EnableUserResultOutput) User_name() pulumi.StringOutput {
	return o.ApplyT(func(v EnableUserResult) string { return v.User_name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(EnableUserResultOutput{})
}
