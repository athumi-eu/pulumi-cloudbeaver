// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package Cloudbeaver

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudbeaver/Cloudbeaver/sdk/go/Cloudbeaver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabaseConnectionSecret struct {
	pulumi.CustomResourceState

	Database_connection_id pulumi.StringOutput `pulumi:"database_connection_id"`
	Entra_group_name       pulumi.StringOutput `pulumi:"entra_group_name"`
	Project_id             pulumi.StringOutput `pulumi:"project_id"`
	Team_id                pulumi.StringOutput `pulumi:"team_id"`
}

// NewDatabaseConnectionSecret registers a new resource with the given unique name, arguments, and options.
func NewDatabaseConnectionSecret(ctx *pulumi.Context,
	name string, args *DatabaseConnectionSecretArgs, opts ...pulumi.ResourceOption) (*DatabaseConnectionSecret, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database_connection_id == nil {
		return nil, errors.New("invalid value for required argument 'Database_connection_id'")
	}
	if args.Entra_group_name == nil {
		return nil, errors.New("invalid value for required argument 'Entra_group_name'")
	}
	if args.Project_id == nil {
		return nil, errors.New("invalid value for required argument 'Project_id'")
	}
	if args.Team_id == nil {
		return nil, errors.New("invalid value for required argument 'Team_id'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseConnectionSecret
	err := ctx.RegisterResource("cloudbeaver:index:DatabaseConnectionSecret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseConnectionSecret gets an existing DatabaseConnectionSecret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseConnectionSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseConnectionSecretState, opts ...pulumi.ResourceOption) (*DatabaseConnectionSecret, error) {
	var resource DatabaseConnectionSecret
	err := ctx.ReadResource("cloudbeaver:index:DatabaseConnectionSecret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseConnectionSecret resources.
type databaseConnectionSecretState struct {
}

type DatabaseConnectionSecretState struct {
}

func (DatabaseConnectionSecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseConnectionSecretState)(nil)).Elem()
}

type databaseConnectionSecretArgs struct {
	Database_connection_id string `pulumi:"database_connection_id"`
	Entra_group_name       string `pulumi:"entra_group_name"`
	Project_id             string `pulumi:"project_id"`
	Team_id                string `pulumi:"team_id"`
}

// The set of arguments for constructing a DatabaseConnectionSecret resource.
type DatabaseConnectionSecretArgs struct {
	Database_connection_id pulumi.StringInput
	Entra_group_name       pulumi.StringInput
	Project_id             pulumi.StringInput
	Team_id                pulumi.StringInput
}

func (DatabaseConnectionSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseConnectionSecretArgs)(nil)).Elem()
}

type DatabaseConnectionSecretInput interface {
	pulumi.Input

	ToDatabaseConnectionSecretOutput() DatabaseConnectionSecretOutput
	ToDatabaseConnectionSecretOutputWithContext(ctx context.Context) DatabaseConnectionSecretOutput
}

func (*DatabaseConnectionSecret) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseConnectionSecret)(nil)).Elem()
}

func (i *DatabaseConnectionSecret) ToDatabaseConnectionSecretOutput() DatabaseConnectionSecretOutput {
	return i.ToDatabaseConnectionSecretOutputWithContext(context.Background())
}

func (i *DatabaseConnectionSecret) ToDatabaseConnectionSecretOutputWithContext(ctx context.Context) DatabaseConnectionSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseConnectionSecretOutput)
}

// DatabaseConnectionSecretArrayInput is an input type that accepts DatabaseConnectionSecretArray and DatabaseConnectionSecretArrayOutput values.
// You can construct a concrete instance of `DatabaseConnectionSecretArrayInput` via:
//
//	DatabaseConnectionSecretArray{ DatabaseConnectionSecretArgs{...} }
type DatabaseConnectionSecretArrayInput interface {
	pulumi.Input

	ToDatabaseConnectionSecretArrayOutput() DatabaseConnectionSecretArrayOutput
	ToDatabaseConnectionSecretArrayOutputWithContext(context.Context) DatabaseConnectionSecretArrayOutput
}

type DatabaseConnectionSecretArray []DatabaseConnectionSecretInput

func (DatabaseConnectionSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseConnectionSecret)(nil)).Elem()
}

func (i DatabaseConnectionSecretArray) ToDatabaseConnectionSecretArrayOutput() DatabaseConnectionSecretArrayOutput {
	return i.ToDatabaseConnectionSecretArrayOutputWithContext(context.Background())
}

func (i DatabaseConnectionSecretArray) ToDatabaseConnectionSecretArrayOutputWithContext(ctx context.Context) DatabaseConnectionSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseConnectionSecretArrayOutput)
}

// DatabaseConnectionSecretMapInput is an input type that accepts DatabaseConnectionSecretMap and DatabaseConnectionSecretMapOutput values.
// You can construct a concrete instance of `DatabaseConnectionSecretMapInput` via:
//
//	DatabaseConnectionSecretMap{ "key": DatabaseConnectionSecretArgs{...} }
type DatabaseConnectionSecretMapInput interface {
	pulumi.Input

	ToDatabaseConnectionSecretMapOutput() DatabaseConnectionSecretMapOutput
	ToDatabaseConnectionSecretMapOutputWithContext(context.Context) DatabaseConnectionSecretMapOutput
}

type DatabaseConnectionSecretMap map[string]DatabaseConnectionSecretInput

func (DatabaseConnectionSecretMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseConnectionSecret)(nil)).Elem()
}

func (i DatabaseConnectionSecretMap) ToDatabaseConnectionSecretMapOutput() DatabaseConnectionSecretMapOutput {
	return i.ToDatabaseConnectionSecretMapOutputWithContext(context.Background())
}

func (i DatabaseConnectionSecretMap) ToDatabaseConnectionSecretMapOutputWithContext(ctx context.Context) DatabaseConnectionSecretMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseConnectionSecretMapOutput)
}

type DatabaseConnectionSecretOutput struct{ *pulumi.OutputState }

func (DatabaseConnectionSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseConnectionSecret)(nil)).Elem()
}

func (o DatabaseConnectionSecretOutput) ToDatabaseConnectionSecretOutput() DatabaseConnectionSecretOutput {
	return o
}

func (o DatabaseConnectionSecretOutput) ToDatabaseConnectionSecretOutputWithContext(ctx context.Context) DatabaseConnectionSecretOutput {
	return o
}

func (o DatabaseConnectionSecretOutput) Database_connection_id() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseConnectionSecret) pulumi.StringOutput { return v.Database_connection_id }).(pulumi.StringOutput)
}

func (o DatabaseConnectionSecretOutput) Entra_group_name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseConnectionSecret) pulumi.StringOutput { return v.Entra_group_name }).(pulumi.StringOutput)
}

func (o DatabaseConnectionSecretOutput) Project_id() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseConnectionSecret) pulumi.StringOutput { return v.Project_id }).(pulumi.StringOutput)
}

func (o DatabaseConnectionSecretOutput) Team_id() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseConnectionSecret) pulumi.StringOutput { return v.Team_id }).(pulumi.StringOutput)
}

type DatabaseConnectionSecretArrayOutput struct{ *pulumi.OutputState }

func (DatabaseConnectionSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseConnectionSecret)(nil)).Elem()
}

func (o DatabaseConnectionSecretArrayOutput) ToDatabaseConnectionSecretArrayOutput() DatabaseConnectionSecretArrayOutput {
	return o
}

func (o DatabaseConnectionSecretArrayOutput) ToDatabaseConnectionSecretArrayOutputWithContext(ctx context.Context) DatabaseConnectionSecretArrayOutput {
	return o
}

func (o DatabaseConnectionSecretArrayOutput) Index(i pulumi.IntInput) DatabaseConnectionSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseConnectionSecret {
		return vs[0].([]*DatabaseConnectionSecret)[vs[1].(int)]
	}).(DatabaseConnectionSecretOutput)
}

type DatabaseConnectionSecretMapOutput struct{ *pulumi.OutputState }

func (DatabaseConnectionSecretMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseConnectionSecret)(nil)).Elem()
}

func (o DatabaseConnectionSecretMapOutput) ToDatabaseConnectionSecretMapOutput() DatabaseConnectionSecretMapOutput {
	return o
}

func (o DatabaseConnectionSecretMapOutput) ToDatabaseConnectionSecretMapOutputWithContext(ctx context.Context) DatabaseConnectionSecretMapOutput {
	return o
}

func (o DatabaseConnectionSecretMapOutput) MapIndex(k pulumi.StringInput) DatabaseConnectionSecretOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseConnectionSecret {
		return vs[0].(map[string]*DatabaseConnectionSecret)[vs[1].(string)]
	}).(DatabaseConnectionSecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseConnectionSecretInput)(nil)).Elem(), &DatabaseConnectionSecret{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseConnectionSecretArrayInput)(nil)).Elem(), DatabaseConnectionSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseConnectionSecretMapInput)(nil)).Elem(), DatabaseConnectionSecretMap{})
	pulumi.RegisterOutputType(DatabaseConnectionSecretOutput{})
	pulumi.RegisterOutputType(DatabaseConnectionSecretArrayOutput{})
	pulumi.RegisterOutputType(DatabaseConnectionSecretMapOutput{})
}
