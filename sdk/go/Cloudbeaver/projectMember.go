// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package Cloudbeaver

import (
	"context"
	"reflect"

	"errors"
	"github.com/cloudbeaver/Cloudbeaver/sdk/go/Cloudbeaver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ProjectMember struct {
	pulumi.CustomResourceState

	Member_id  pulumi.StringOutput `pulumi:"member_id"`
	Project_id pulumi.StringOutput `pulumi:"project_id"`
}

// NewProjectMember registers a new resource with the given unique name, arguments, and options.
func NewProjectMember(ctx *pulumi.Context,
	name string, args *ProjectMemberArgs, opts ...pulumi.ResourceOption) (*ProjectMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Member_id == nil {
		return nil, errors.New("invalid value for required argument 'Member_id'")
	}
	if args.Project_id == nil {
		return nil, errors.New("invalid value for required argument 'Project_id'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectMember
	err := ctx.RegisterResource("cloudbeaver:index:ProjectMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectMember gets an existing ProjectMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectMemberState, opts ...pulumi.ResourceOption) (*ProjectMember, error) {
	var resource ProjectMember
	err := ctx.ReadResource("cloudbeaver:index:ProjectMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectMember resources.
type projectMemberState struct {
}

type ProjectMemberState struct {
}

func (ProjectMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMemberState)(nil)).Elem()
}

type projectMemberArgs struct {
	Member_id  string `pulumi:"member_id"`
	Project_id string `pulumi:"project_id"`
}

// The set of arguments for constructing a ProjectMember resource.
type ProjectMemberArgs struct {
	Member_id  pulumi.StringInput
	Project_id pulumi.StringInput
}

func (ProjectMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectMemberArgs)(nil)).Elem()
}

type ProjectMemberInput interface {
	pulumi.Input

	ToProjectMemberOutput() ProjectMemberOutput
	ToProjectMemberOutputWithContext(ctx context.Context) ProjectMemberOutput
}

func (*ProjectMember) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMember)(nil)).Elem()
}

func (i *ProjectMember) ToProjectMemberOutput() ProjectMemberOutput {
	return i.ToProjectMemberOutputWithContext(context.Background())
}

func (i *ProjectMember) ToProjectMemberOutputWithContext(ctx context.Context) ProjectMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMemberOutput)
}

// ProjectMemberArrayInput is an input type that accepts ProjectMemberArray and ProjectMemberArrayOutput values.
// You can construct a concrete instance of `ProjectMemberArrayInput` via:
//
//	ProjectMemberArray{ ProjectMemberArgs{...} }
type ProjectMemberArrayInput interface {
	pulumi.Input

	ToProjectMemberArrayOutput() ProjectMemberArrayOutput
	ToProjectMemberArrayOutputWithContext(context.Context) ProjectMemberArrayOutput
}

type ProjectMemberArray []ProjectMemberInput

func (ProjectMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectMember)(nil)).Elem()
}

func (i ProjectMemberArray) ToProjectMemberArrayOutput() ProjectMemberArrayOutput {
	return i.ToProjectMemberArrayOutputWithContext(context.Background())
}

func (i ProjectMemberArray) ToProjectMemberArrayOutputWithContext(ctx context.Context) ProjectMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMemberArrayOutput)
}

// ProjectMemberMapInput is an input type that accepts ProjectMemberMap and ProjectMemberMapOutput values.
// You can construct a concrete instance of `ProjectMemberMapInput` via:
//
//	ProjectMemberMap{ "key": ProjectMemberArgs{...} }
type ProjectMemberMapInput interface {
	pulumi.Input

	ToProjectMemberMapOutput() ProjectMemberMapOutput
	ToProjectMemberMapOutputWithContext(context.Context) ProjectMemberMapOutput
}

type ProjectMemberMap map[string]ProjectMemberInput

func (ProjectMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectMember)(nil)).Elem()
}

func (i ProjectMemberMap) ToProjectMemberMapOutput() ProjectMemberMapOutput {
	return i.ToProjectMemberMapOutputWithContext(context.Background())
}

func (i ProjectMemberMap) ToProjectMemberMapOutputWithContext(ctx context.Context) ProjectMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMemberMapOutput)
}

type ProjectMemberOutput struct{ *pulumi.OutputState }

func (ProjectMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectMember)(nil)).Elem()
}

func (o ProjectMemberOutput) ToProjectMemberOutput() ProjectMemberOutput {
	return o
}

func (o ProjectMemberOutput) ToProjectMemberOutputWithContext(ctx context.Context) ProjectMemberOutput {
	return o
}

func (o ProjectMemberOutput) Member_id() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMember) pulumi.StringOutput { return v.Member_id }).(pulumi.StringOutput)
}

func (o ProjectMemberOutput) Project_id() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectMember) pulumi.StringOutput { return v.Project_id }).(pulumi.StringOutput)
}

type ProjectMemberArrayOutput struct{ *pulumi.OutputState }

func (ProjectMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectMember)(nil)).Elem()
}

func (o ProjectMemberArrayOutput) ToProjectMemberArrayOutput() ProjectMemberArrayOutput {
	return o
}

func (o ProjectMemberArrayOutput) ToProjectMemberArrayOutputWithContext(ctx context.Context) ProjectMemberArrayOutput {
	return o
}

func (o ProjectMemberArrayOutput) Index(i pulumi.IntInput) ProjectMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectMember {
		return vs[0].([]*ProjectMember)[vs[1].(int)]
	}).(ProjectMemberOutput)
}

type ProjectMemberMapOutput struct{ *pulumi.OutputState }

func (ProjectMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectMember)(nil)).Elem()
}

func (o ProjectMemberMapOutput) ToProjectMemberMapOutput() ProjectMemberMapOutput {
	return o
}

func (o ProjectMemberMapOutput) ToProjectMemberMapOutputWithContext(ctx context.Context) ProjectMemberMapOutput {
	return o
}

func (o ProjectMemberMapOutput) MapIndex(k pulumi.StringInput) ProjectMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectMember {
		return vs[0].(map[string]*ProjectMember)[vs[1].(string)]
	}).(ProjectMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMemberInput)(nil)).Elem(), &ProjectMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMemberArrayInput)(nil)).Elem(), ProjectMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMemberMapInput)(nil)).Elem(), ProjectMemberMap{})
	pulumi.RegisterOutputType(ProjectMemberOutput{})
	pulumi.RegisterOutputType(ProjectMemberArrayOutput{})
	pulumi.RegisterOutputType(ProjectMemberMapOutput{})
}
