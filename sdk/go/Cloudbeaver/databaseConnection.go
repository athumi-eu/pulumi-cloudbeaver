// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package Cloudbeaver

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/Cloudbeaver/sdk/go/Cloudbeaver/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DatabaseConnection struct {
	pulumi.CustomResourceState

	Database   pulumi.StringOutput `pulumi:"database"`
	Endpoint   pulumi.StringOutput `pulumi:"endpoint"`
	Name       pulumi.StringOutput `pulumi:"name"`
	Project_id pulumi.StringOutput `pulumi:"project_id"`
}

// NewDatabaseConnection registers a new resource with the given unique name, arguments, and options.
func NewDatabaseConnection(ctx *pulumi.Context,
	name string, args *DatabaseConnectionArgs, opts ...pulumi.ResourceOption) (*DatabaseConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Database == nil {
		return nil, errors.New("invalid value for required argument 'Database'")
	}
	if args.Endpoint == nil {
		return nil, errors.New("invalid value for required argument 'Endpoint'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Project_id == nil {
		return nil, errors.New("invalid value for required argument 'Project_id'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DatabaseConnection
	err := ctx.RegisterResource("cloudbeaver:index:DatabaseConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseConnection gets an existing DatabaseConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseConnectionState, opts ...pulumi.ResourceOption) (*DatabaseConnection, error) {
	var resource DatabaseConnection
	err := ctx.ReadResource("cloudbeaver:index:DatabaseConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseConnection resources.
type databaseConnectionState struct {
}

type DatabaseConnectionState struct {
}

func (DatabaseConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseConnectionState)(nil)).Elem()
}

type databaseConnectionArgs struct {
	Database   string `pulumi:"database"`
	Endpoint   string `pulumi:"endpoint"`
	Name       string `pulumi:"name"`
	Project_id string `pulumi:"project_id"`
}

// The set of arguments for constructing a DatabaseConnection resource.
type DatabaseConnectionArgs struct {
	Database   pulumi.StringInput
	Endpoint   pulumi.StringInput
	Name       pulumi.StringInput
	Project_id pulumi.StringInput
}

func (DatabaseConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseConnectionArgs)(nil)).Elem()
}

type DatabaseConnectionInput interface {
	pulumi.Input

	ToDatabaseConnectionOutput() DatabaseConnectionOutput
	ToDatabaseConnectionOutputWithContext(ctx context.Context) DatabaseConnectionOutput
}

func (*DatabaseConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseConnection)(nil)).Elem()
}

func (i *DatabaseConnection) ToDatabaseConnectionOutput() DatabaseConnectionOutput {
	return i.ToDatabaseConnectionOutputWithContext(context.Background())
}

func (i *DatabaseConnection) ToDatabaseConnectionOutputWithContext(ctx context.Context) DatabaseConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseConnectionOutput)
}

// DatabaseConnectionArrayInput is an input type that accepts DatabaseConnectionArray and DatabaseConnectionArrayOutput values.
// You can construct a concrete instance of `DatabaseConnectionArrayInput` via:
//
//	DatabaseConnectionArray{ DatabaseConnectionArgs{...} }
type DatabaseConnectionArrayInput interface {
	pulumi.Input

	ToDatabaseConnectionArrayOutput() DatabaseConnectionArrayOutput
	ToDatabaseConnectionArrayOutputWithContext(context.Context) DatabaseConnectionArrayOutput
}

type DatabaseConnectionArray []DatabaseConnectionInput

func (DatabaseConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseConnection)(nil)).Elem()
}

func (i DatabaseConnectionArray) ToDatabaseConnectionArrayOutput() DatabaseConnectionArrayOutput {
	return i.ToDatabaseConnectionArrayOutputWithContext(context.Background())
}

func (i DatabaseConnectionArray) ToDatabaseConnectionArrayOutputWithContext(ctx context.Context) DatabaseConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseConnectionArrayOutput)
}

// DatabaseConnectionMapInput is an input type that accepts DatabaseConnectionMap and DatabaseConnectionMapOutput values.
// You can construct a concrete instance of `DatabaseConnectionMapInput` via:
//
//	DatabaseConnectionMap{ "key": DatabaseConnectionArgs{...} }
type DatabaseConnectionMapInput interface {
	pulumi.Input

	ToDatabaseConnectionMapOutput() DatabaseConnectionMapOutput
	ToDatabaseConnectionMapOutputWithContext(context.Context) DatabaseConnectionMapOutput
}

type DatabaseConnectionMap map[string]DatabaseConnectionInput

func (DatabaseConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseConnection)(nil)).Elem()
}

func (i DatabaseConnectionMap) ToDatabaseConnectionMapOutput() DatabaseConnectionMapOutput {
	return i.ToDatabaseConnectionMapOutputWithContext(context.Background())
}

func (i DatabaseConnectionMap) ToDatabaseConnectionMapOutputWithContext(ctx context.Context) DatabaseConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseConnectionMapOutput)
}

type DatabaseConnectionOutput struct{ *pulumi.OutputState }

func (DatabaseConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseConnection)(nil)).Elem()
}

func (o DatabaseConnectionOutput) ToDatabaseConnectionOutput() DatabaseConnectionOutput {
	return o
}

func (o DatabaseConnectionOutput) ToDatabaseConnectionOutputWithContext(ctx context.Context) DatabaseConnectionOutput {
	return o
}

func (o DatabaseConnectionOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseConnection) pulumi.StringOutput { return v.Database }).(pulumi.StringOutput)
}

func (o DatabaseConnectionOutput) Endpoint() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseConnection) pulumi.StringOutput { return v.Endpoint }).(pulumi.StringOutput)
}

func (o DatabaseConnectionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseConnection) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o DatabaseConnectionOutput) Project_id() pulumi.StringOutput {
	return o.ApplyT(func(v *DatabaseConnection) pulumi.StringOutput { return v.Project_id }).(pulumi.StringOutput)
}

type DatabaseConnectionArrayOutput struct{ *pulumi.OutputState }

func (DatabaseConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseConnection)(nil)).Elem()
}

func (o DatabaseConnectionArrayOutput) ToDatabaseConnectionArrayOutput() DatabaseConnectionArrayOutput {
	return o
}

func (o DatabaseConnectionArrayOutput) ToDatabaseConnectionArrayOutputWithContext(ctx context.Context) DatabaseConnectionArrayOutput {
	return o
}

func (o DatabaseConnectionArrayOutput) Index(i pulumi.IntInput) DatabaseConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatabaseConnection {
		return vs[0].([]*DatabaseConnection)[vs[1].(int)]
	}).(DatabaseConnectionOutput)
}

type DatabaseConnectionMapOutput struct{ *pulumi.OutputState }

func (DatabaseConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseConnection)(nil)).Elem()
}

func (o DatabaseConnectionMapOutput) ToDatabaseConnectionMapOutput() DatabaseConnectionMapOutput {
	return o
}

func (o DatabaseConnectionMapOutput) ToDatabaseConnectionMapOutputWithContext(ctx context.Context) DatabaseConnectionMapOutput {
	return o
}

func (o DatabaseConnectionMapOutput) MapIndex(k pulumi.StringInput) DatabaseConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatabaseConnection {
		return vs[0].(map[string]*DatabaseConnection)[vs[1].(string)]
	}).(DatabaseConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseConnectionInput)(nil)).Elem(), &DatabaseConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseConnectionArrayInput)(nil)).Elem(), DatabaseConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabaseConnectionMapInput)(nil)).Elem(), DatabaseConnectionMap{})
	pulumi.RegisterOutputType(DatabaseConnectionOutput{})
	pulumi.RegisterOutputType(DatabaseConnectionArrayOutput{})
	pulumi.RegisterOutputType(DatabaseConnectionMapOutput{})
}
