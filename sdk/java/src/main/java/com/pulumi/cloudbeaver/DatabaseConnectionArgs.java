// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.cloudbeaver;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class DatabaseConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DatabaseConnectionArgs Empty = new DatabaseConnectionArgs();

    @Import(name="database", required=true)
    private Output<String> database;

    public Output<String> database() {
        return this.database;
    }

    @Import(name="endpoint", required=true)
    private Output<String> endpoint;

    public Output<String> endpoint() {
        return this.endpoint;
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="project_id", required=true)
    private Output<String> project_id;

    public Output<String> project_id() {
        return this.project_id;
    }

    private DatabaseConnectionArgs() {}

    private DatabaseConnectionArgs(DatabaseConnectionArgs $) {
        this.database = $.database;
        this.endpoint = $.endpoint;
        this.name = $.name;
        this.project_id = $.project_id;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DatabaseConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DatabaseConnectionArgs $;

        public Builder() {
            $ = new DatabaseConnectionArgs();
        }

        public Builder(DatabaseConnectionArgs defaults) {
            $ = new DatabaseConnectionArgs(Objects.requireNonNull(defaults));
        }

        public Builder database(Output<String> database) {
            $.database = database;
            return this;
        }

        public Builder database(String database) {
            return database(Output.of(database));
        }

        public Builder endpoint(Output<String> endpoint) {
            $.endpoint = endpoint;
            return this;
        }

        public Builder endpoint(String endpoint) {
            return endpoint(Output.of(endpoint));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder project_id(Output<String> project_id) {
            $.project_id = project_id;
            return this;
        }

        public Builder project_id(String project_id) {
            return project_id(Output.of(project_id));
        }

        public DatabaseConnectionArgs build() {
            if ($.database == null) {
                throw new MissingRequiredPropertyException("DatabaseConnectionArgs", "database");
            }
            if ($.endpoint == null) {
                throw new MissingRequiredPropertyException("DatabaseConnectionArgs", "endpoint");
            }
            if ($.name == null) {
                throw new MissingRequiredPropertyException("DatabaseConnectionArgs", "name");
            }
            if ($.project_id == null) {
                throw new MissingRequiredPropertyException("DatabaseConnectionArgs", "project_id");
            }
            return $;
        }
    }

}
